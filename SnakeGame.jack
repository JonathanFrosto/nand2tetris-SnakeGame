class SnakeGame {
    field Snake snake;
    field int direction, difficult;
    field Square food;

    constructor SnakeGame new() {
        do init();

        let snake = Snake.new(256, 128);
        let food = Square.new(Random.randRange(502), Random.randRange(246), 10);
        let direction = 0;

        return this;
    }

    method void dispose() {
        do snake.dispose();
        do Memory.deAlloc(this);

        return;
    }

    method void init() {
        var int currentChar;

        while (~(currentChar = 65) & ~(currentChar = 66) & ~(currentChar = 67)) {
            do Output.moveCursor(9, 28);
            do Output.printString("SNAKE GAME");

            do Output.moveCursor(11, 28);
            do Output.printString("A - FACIL");

            do Output.moveCursor(12, 28);
            do Output.printString("B - MEDIO");

            do Output.moveCursor(13, 27);
            do Output.printString("C - DIFICIL");
            do Output.println();

            let currentChar = Keyboard.readChar();

            if (currentChar = 65) { let difficult = 600; }
            if (currentChar = 66) { let difficult = 300; }
            if (currentChar = 67) { let difficult = 150; }
            do Screen.clearScreen();
        }
        return;
    }

    method void setDirection() {
        var int key;
        let key = Keyboard.keyPressed();
        if (key = 131) { 
            // up arrow
            if (~(direction = 2)) {
                let direction = 1;
            }
        }   
        if (key = 133) {
            // down arrow
            if (~(direction = 1)){
                let direction = 2;
            }
        }   
        if (key = 130) {
            // left arrow
            if (~(direction = 4)){
                let direction = 3;
            }
            
        }   
        if (key = 132) {
            // right arrow
            if (~(direction = 3)) {
                let direction = 4;
            }
        }
        return;
    }

    method void moveSnake() {
        if (direction = 1) {do snake.moveUp();}
        if (direction = 2) {do snake.moveDown();}
        if (direction = 3) {do snake.moveLeft();}
        if (direction = 4) {do snake.moveRight();}
        
        return;
    }

    method boolean doSheAte(Square bodyPiece, int xFood, int yFood) {
        var int xFood, yFood, xFoodFinal, yFoodFinal;
        var int xSquare, ySquare, xSquareFinal, ySquareFinal;

        let xFoodFinal = xFood + 10;
        let yFoodFinal = yFood + 10;

        let xSquare = bodyPiece.getXCord() - 1;
        let xSquareFinal = xSquare + 22;
        let ySquare = bodyPiece.getYCord() - 1;
        let ySquareFinal = ySquare + 22;

        if ((xFood > xSquare) | (xFoodFinal > xSquare)) {      
            if ((xFood < xSquareFinal) | (xFoodFinal < xSquareFinal)) {
                if((yFood > ySquare) | (yFoodFinal > ySquare)) {
                    if ((yFood < ySquareFinal) | (yFood < ySquareFinal)) {
                        return true;
                    }
                }
            }
        }

        return false;
    }

    method boolean foodConflict(int newXcord, int newYcord) {
        var int count, length;
        let length = snake.getLength();
        
        let count = 0;
        while (count < length) {
            if (doSheAte(snake.getPiece(count), newXcord, newYcord)) { return true; }
            let count = count + 1;
        }

        return false;
    }

    method void randFood() {
        var int x, y;
        let x = Random.randRange(492);
        let y = Random.randRange(246);

        while ((x < 20) | foodConflict(x, y)) {
            let x = Random.randRange(492);
            let y = Random.randRange(246);
        }

        do food.erase();
        do food.draw(x, y);

        return;
    }

    method boolean collision() {
        var int xHead, yHead, length, count;
        var Square tailPiece;

        let xHead = snake.getXHead();
        let yHead = snake.getYHead();

        let count = 1;
        let length = snake.getLength();
        while (count < length) {
            let tailPiece = snake.getPiece(count);

            if (tailPiece.getXCord() = xHead) {
                if(tailPiece.getYCord() = yHead) {
                    return true;
                }
            }

            let count = count + 1;
        }

        return false;
    }

    method boolean hasWon() {
        if (snake.getLength() > 287) { return true; }
        return false;
    }

    method void finalMessage(String text) {
        do Screen.clearScreen();
        do Output.moveCursor(11, 18);
        do Output.printString(text);

        return;
    }

    method void run() {
        var char key;
        var boolean firstStep;
        
        let firstStep = true;
        while (firstStep) {
            let key = Keyboard.keyPressed();
            if (~(key = 0)) { let firstStep = false; }
        }

        while (true) {
            do Sys.wait(difficult);
            do setDirection();
            do moveSnake();   

            if (doSheAte(snake.getPiece(0), food.getXCord(), food.getYCord())) {
                do snake.grow();

                if (hasWon()) {
                    do finalMessage("Parabens, voce ganhou!");
                    return;
                }

                do randFood();
            }

            if (collision()) {
                do finalMessage("Infelizment voce perdeu!");
                return;
            }
        }
        return;
    }
}