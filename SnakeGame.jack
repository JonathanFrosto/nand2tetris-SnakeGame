class SnakeGame {
    field Snake snake;
    field int direction, difficult;
    field Square food;

    constructor SnakeGame new() {
        do init();

        let snake = Snake.new(256, 128);
        let food = Square.new(Random.randRange(502), Random.randRange(246), 10);
        let direction = 0;

        return this;
    }

    method void dispose() {
        do snake.dispose();
        do Memory.deAlloc(this);

        return;
    }

    method void init() {
        var int currentChar;

        while (~(currentChar = 65) & ~(currentChar = 66) & ~(currentChar = 67)) {
            do Output.moveCursor(9, 28);
            do Output.printString("SNAKE GAME");

            do Output.moveCursor(11, 28);
            do Output.printString("A - FACIL");

            do Output.moveCursor(12, 28);
            do Output.printString("B - MEDIO");

            do Output.moveCursor(13, 27);
            do Output.printString("C - DIFICIL");
            do Output.println();

            let currentChar = Keyboard.readChar();

            if (currentChar = 65) { let difficult = 1000; }
            if (currentChar = 66) { let difficult = 600; }
            if (currentChar = 67) { let difficult = 300; }
            do Screen.clearScreen();
        }
        return;
    }

    method void setDirection() {
        var int key;
        let key = Keyboard.keyPressed();
        if (key = 131) { 
            // up arrow
            if (~(direction = 2)) {
                let direction = 1;
            }
        }   
        if (key = 133) {
            // down arrow
            if (~(direction = 1)){
                let direction = 2;
            }
        }   
        if (key = 130) {
            // left arrow
            if (~(direction = 4)){
                let direction = 3;
            }
            
        }   
        if (key = 132) {
            // right arrow
            if (~(direction = 3)) {
                let direction = 4;
            }
        }
        return;
    }

    method void moveSnake() {
        if (direction = 1) {do snake.moveUp();}
        if (direction = 2) {do snake.moveDown();}
        if (direction = 3) {do snake.moveLeft();}
        if (direction = 4) {do snake.moveRight();}
        
        return;
    }
    
    method boolean collision() {
        var int xHead, yHead, length, count;
        var ArrayList snakeBody;
        var Square tailPiece;

        let snakeBody = snake.getBody();        

        let xHead = snake.getXHead();
        let yHead = snake.getYHead();

        let count = 1;
        let length = snake.getLength();
        while (count < length) {
            let tailPiece = snakeBody.getValue(count);

            if (tailPiece.getXCord() = xHead) {
                if(tailPiece.getYCord() = yHead) {
                    return true;
                }
            }

            let count = count + 1;
        }

        return false;
    }

    method boolean doSheAte() {
        var int xFood, yFood, xFoodFinal, yFoodFinal;
        var int xHead, yHead, xHeadFinal, yHeadFinal;

        let xFood = food.getXCord();
        let xFoodFinal = xFood + 10;
        let yFood = food.getYCord();
        let yFoodFinal = yFood + 10;

        let xHead = snake.getXHead() - 1;
        let xHeadFinal = xHead + 22;
        let yHead = snake.getYHead() - 1;
        let yHeadFinal = yHead + 22;

        if ((xFood > xHead) | (xFoodFinal > xHead)) {      
            if ((xFood < xHeadFinal) | (xFoodFinal < xHeadFinal)) {
                if((yFood > yHead) | (yFoodFinal > yHead)) {
                    if ((yFood < yHeadFinal) | (yFood < yHeadFinal)) {
                        return true;
                    }
                }
            }
        }

        return false;
    }

    method void randFood() {
        var int x, y;
        let x = Random.randRange(492);
        let y = Random.randRange(246);

        while (x < 20) {
            let x = Random.randRange(492);
        }

        do food.erase();
        do food.draw(x, y);

        return;
    }

    method void run() {
        var char key;
        var boolean firstStep, inGame;
        
        let firstStep = true;
        while (firstStep) {
            let key = Keyboard.keyPressed();
            if (~(key = 0)) { let firstStep = false; }
        }

        let inGame = true;
        while (inGame) {
            do Sys.wait(difficult);
            do setDirection();
            do moveSnake();   

            if (doSheAte()) {
                do snake.grow();
                do randFood();
            }

            if (collision()) {
                let inGame = false;
                do Screen.clearScreen();
                do Output.moveCursor(11, 18);
                do Output.printString("Fim do jogo, voce perdeu!");
            }
        }
        return;
    }
}